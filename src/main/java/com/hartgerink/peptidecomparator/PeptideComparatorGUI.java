/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hartgerink.peptidecomparator;

//import java.awt.BasicStroke;
//import java.awt.Color;
//import java.awt.Dimension;
//import java.awt.Font;
//import java.awt.Graphics;
//import java.awt.Graphics2D;
//import java.awt.RenderingHints;

/**
 *
 * @author kevinhartgerink
 */
public class PeptideComparatorGUI extends javax.swing.JFrame {

    /**
     * Creates new form PeptideComparatorGUI
     */
    public PeptideComparatorGUI() {
        initComponents();
        
        sendAllControls();
        
        jLabelPeptideA_Name.setText("Name: "   + peptidesOnDisplay.getPeptideA().getName());
        jLabelPeptideA_Path.setText("Source: " + peptidesOnDisplay.getPeptideA().getSource());
        jLabelPeptideB_Name.setText("Name: "   + peptidesOnDisplay.getPeptideB().getName());
        jLabelPeptideB_Path.setText("Source: "  + peptidesOnDisplay.getPeptideB().getSource());
        
    }

    private void sendAllControls() {
        peptidesOnDisplay.setMatch(false);
        peptidesOnDisplay.setShowCompare(true);
        peptidesOnDisplay.setShowCompare(true);
        peptidesOnDisplay.setMagnification(jSliderMagnification.getValue());
        peptidesOnDisplay.setScroll(jSliderScroll.getValue());
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupHighlighting = new javax.swing.ButtonGroup();
        jLabelProgramName = new javax.swing.JLabel();
        jLabelPeptideA_Name = new javax.swing.JLabel();
        jLabelPeptideB_Name = new javax.swing.JLabel();
        jLabelMagnification = new javax.swing.JLabel();
        jLabelPeptideScroller = new javax.swing.JLabel();
        jSliderMagnification = new javax.swing.JSlider();
        jSliderScroll = new javax.swing.JSlider();
        jRadioHighlightUnmatched = new javax.swing.JRadioButton();
        jRadioHighlightMatching = new javax.swing.JRadioButton();
        jRadioHighlightNone = new javax.swing.JRadioButton();
        peptidesOnDisplay = new com.hartgerink.peptidecomparator.PeptideComparator();
        jLabelPeptideA_Path = new javax.swing.JLabel();
        jLabelPeptideB_Path = new javax.swing.JLabel();
        jButtonChooseHighlightColor = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemChoosePeptideA = new javax.swing.JMenuItem();
        jMenuItemChoosePeptideB = new javax.swing.JMenuItem();
        jMenuItemUseDefaultPeptideA = new javax.swing.JMenuItem();
        jMenuItemUseDefaultPeptideB = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelProgramName.setText("Peptide Comparator 1.0");

        jLabelPeptideA_Name.setText("Peptide A: ");

        jLabelPeptideB_Name.setText("Peptide B:");

        jLabelMagnification.setText("Peptide Magnification");

        jLabelPeptideScroller.setText("Peptide Scroller");

        jSliderMagnification.setMaximum(40);
        jSliderMagnification.setValue(12);
        jSliderMagnification.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderMagnificationStateChanged(evt);
            }
        });

        jSliderScroll.setMaximum(324);
        jSliderScroll.setValue(0);
        jSliderScroll.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderScrollStateChanged(evt);
            }
        });

        buttonGroupHighlighting.add(jRadioHighlightUnmatched);
        jRadioHighlightUnmatched.setSelected(true);
        jRadioHighlightUnmatched.setText("Highlight: Unmatched Amino Acids");
        jRadioHighlightUnmatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioHighlightUnmatchedActionPerformed(evt);
            }
        });

        buttonGroupHighlighting.add(jRadioHighlightMatching);
        jRadioHighlightMatching.setText("Highlight: Matching Amino Acids");
        jRadioHighlightMatching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioHighlightMatchingActionPerformed(evt);
            }
        });

        buttonGroupHighlighting.add(jRadioHighlightNone);
        jRadioHighlightNone.setText("Highlight: None");
        jRadioHighlightNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioHighlightNoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout peptidesOnDisplayLayout = new javax.swing.GroupLayout(peptidesOnDisplay);
        peptidesOnDisplay.setLayout(peptidesOnDisplayLayout);
        peptidesOnDisplayLayout.setHorizontalGroup(
            peptidesOnDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        peptidesOnDisplayLayout.setVerticalGroup(
            peptidesOnDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jLabelPeptideA_Path.setText("Path: ");

        jLabelPeptideB_Path.setText("Path: ");

        jButtonChooseHighlightColor.setText("Choose Highlight Color");
        jButtonChooseHighlightColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseHighlightColorActionPerformed(evt);
            }
        });

        jMenuFile.setText("File");

        jMenuItemChoosePeptideA.setText("Choose Peptide A");
        jMenuItemChoosePeptideA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChoosePeptideAActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemChoosePeptideA);

        jMenuItemChoosePeptideB.setText("Choose Peptide B");
        jMenuItemChoosePeptideB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChoosePeptideBActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemChoosePeptideB);

        jMenuItemUseDefaultPeptideA.setText("Use Default Peptide A");
        jMenuItemUseDefaultPeptideA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUseDefaultPeptideAActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemUseDefaultPeptideA);

        jMenuItemUseDefaultPeptideB.setText("Use Default Peptide B");
        jMenuItemUseDefaultPeptideB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUseDefaultPeptideBActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemUseDefaultPeptideB);

        jMenuBar1.add(jMenuFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelPeptideScroller)
                .addGap(587, 587, 587))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSliderScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelProgramName))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelPeptideB_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelPeptideB_Path, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonChooseHighlightColor)
                                .addGap(175, 175, 175)
                                .addComponent(jLabelMagnification))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioHighlightUnmatched)
                                    .addComponent(jRadioHighlightMatching)
                                    .addComponent(jRadioHighlightNone))
                                .addGap(113, 113, 113)
                                .addComponent(jSliderMagnification, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 509, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peptidesOnDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPeptideA_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelPeptideA_Path, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelProgramName)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelMagnification)
                            .addComponent(jButtonChooseHighlightColor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSliderMagnification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioHighlightUnmatched)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioHighlightMatching)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioHighlightNone)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPeptideA_Name)
                    .addComponent(jLabelPeptideA_Path))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peptidesOnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPeptideB_Name)
                    .addComponent(jLabelPeptideB_Path))
                .addGap(22, 22, 22)
                .addComponent(jSliderScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelPeptideScroller)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioHighlightUnmatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioHighlightUnmatchedActionPerformed
        // TODO add your handling code here:
        peptidesOnDisplay.setMatch(false);
        peptidesOnDisplay.setShowCompare(true);
        
    }//GEN-LAST:event_jRadioHighlightUnmatchedActionPerformed

    private void jRadioHighlightMatchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioHighlightMatchingActionPerformed
        // TODO add your handling code here:
        peptidesOnDisplay.setMatch(true);
        peptidesOnDisplay.setShowCompare(true);
    }//GEN-LAST:event_jRadioHighlightMatchingActionPerformed

    private void jRadioHighlightNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioHighlightNoneActionPerformed
        // TODO add your handling code here:
        peptidesOnDisplay.setShowCompare(false);
        
    }//GEN-LAST:event_jRadioHighlightNoneActionPerformed

    private void jMenuItemChoosePeptideAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChoosePeptideAActionPerformed
        // TODO add your handling code here:
        Peptide P = new Peptide();
        boolean OK = P.buildPeptideStringFromFile();
        if(OK) {
            P.buildAminoAcidArrayFromString();
            peptidesOnDisplay.setPeptide1(P);
            jLabelPeptideA_Name.setText("Name: " + P.getName());
            jLabelPeptideA_Path.setText("Source: " + P.getSource());
        }
        
                
        
    }//GEN-LAST:event_jMenuItemChoosePeptideAActionPerformed

    private void jSliderMagnificationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderMagnificationStateChanged
        // TODO add your handling code here:
        peptidesOnDisplay.setMagnification(jSliderMagnification.getValue());
    }//GEN-LAST:event_jSliderMagnificationStateChanged

    private void jSliderScrollStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderScrollStateChanged
        // TODO add your handling code here:
        peptidesOnDisplay.setScroll(jSliderScroll.getValue());
    }//GEN-LAST:event_jSliderScrollStateChanged

    private void jMenuItemChoosePeptideBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChoosePeptideBActionPerformed
        // TODO add your handling code here:
        Peptide P = new Peptide();
        boolean OK = P.buildPeptideStringFromFile();
        if(OK) {        
            P.buildAminoAcidArrayFromString();
            peptidesOnDisplay.setPeptide2(P);
            jLabelPeptideB_Name.setText("Name: " + P.getName());
            jLabelPeptideB_Path.setText("Source: " + P.getSource());
        }
    }//GEN-LAST:event_jMenuItemChoosePeptideBActionPerformed

    private void jMenuItemUseDefaultPeptideAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUseDefaultPeptideAActionPerformed
        // TODO add your handling code here:
        Peptide P = new Peptide();
        P.buildPeptideStringFromDefault(1);
        P.buildAminoAcidArrayFromString();
        peptidesOnDisplay.setPeptide1(P);
        jLabelPeptideA_Name.setText("Name: " + P.getName());
        jLabelPeptideA_Path.setText("Source: " + P.getSource());
    }//GEN-LAST:event_jMenuItemUseDefaultPeptideAActionPerformed

    private void jMenuItemUseDefaultPeptideBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUseDefaultPeptideBActionPerformed
        // TODO add your handling code here:
        Peptide P = new Peptide();
        P.buildPeptideStringFromDefault(2);
        P.buildAminoAcidArrayFromString();
        peptidesOnDisplay.setPeptide2(P);
        jLabelPeptideB_Name.setText("Name: " + P.getName());
        jLabelPeptideB_Path.setText("Source: " + P.getSource());
    }//GEN-LAST:event_jMenuItemUseDefaultPeptideBActionPerformed

    private void jButtonChooseHighlightColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseHighlightColorActionPerformed
        // TODO add your handling code here:
        peptidesOnDisplay.setHighlightColor();
    }//GEN-LAST:event_jButtonChooseHighlightColorActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PeptideComparatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PeptideComparatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PeptideComparatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PeptideComparatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PeptideComparatorGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupHighlighting;
    private javax.swing.JButton jButtonChooseHighlightColor;
    private javax.swing.JLabel jLabelMagnification;
    private javax.swing.JLabel jLabelPeptideA_Name;
    private javax.swing.JLabel jLabelPeptideA_Path;
    private javax.swing.JLabel jLabelPeptideB_Name;
    private javax.swing.JLabel jLabelPeptideB_Path;
    private javax.swing.JLabel jLabelPeptideScroller;
    private javax.swing.JLabel jLabelProgramName;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemChoosePeptideA;
    private javax.swing.JMenuItem jMenuItemChoosePeptideB;
    private javax.swing.JMenuItem jMenuItemUseDefaultPeptideA;
    private javax.swing.JMenuItem jMenuItemUseDefaultPeptideB;
    private javax.swing.JRadioButton jRadioHighlightMatching;
    private javax.swing.JRadioButton jRadioHighlightNone;
    private javax.swing.JRadioButton jRadioHighlightUnmatched;
    private javax.swing.JSlider jSliderMagnification;
    private javax.swing.JSlider jSliderScroll;
    private com.hartgerink.peptidecomparator.PeptideComparator peptidesOnDisplay;
    // End of variables declaration//GEN-END:variables
}
